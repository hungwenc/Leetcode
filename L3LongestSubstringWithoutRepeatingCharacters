/* L3. Longest Substring Without Repeating Characters
Given a string, find the length of the longest substring without repeating characters.
Examples:
Given "abcabcbb", the answer is "abc", which the length is 3.
Given "bbbbb", the answer is "b", with the length of 1.
Given "pwwkew", the answer is "wke", with the length of 3. Note that the answer must be a substring, "pwke" is a subsequence and not a substring.
*/

public class Solution {
    public int lengthOfLongestSubstring(String s) {
        int len = s.length();
        if(s == null || len == 0) return 0;
        if(len == 1) return 1;
        // use map to store the index of the character in the string
        HashMap<Character, Integer> map = new HashMap<>(); 
        
        int max = 1; // at least 1;
        // use two pointers
        int slow = 0;
        for(int i = 0; i < len; i++){
            char c = s.charAt(i);
            if(!map.containsKey(c)){
            }else{
                // [notice]* slow pointer must move forward (can't move backward) 
                // so we have to use Math.max (try "abba" case) 
                slow = Math.max(slow, map.get(c) + 1);
            }
            map.put(c, i);
            max = Math.max(max, i - slow + 1);
        }
        return max;
    }
}
