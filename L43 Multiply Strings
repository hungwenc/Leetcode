/*L43. Multiply Strings
Given two non-negative integers num1 and num2 represented as strings, return the product of num1 and num2.

Note:

The length of both num1 and num2 is < 110.
Both num1 and num2 contains only digits 0-9.
Both num1 and num2 does not contain any leading zero.
You must not use any built-in BigInteger library or convert the inputs to integer directly.
*/
public class Solution {
    public String multiply(String num1, String num2) {
        if(num1 == null || num2 == null) return null;
        if(num1.length() == 0 || num2.length() == 0) return "0";

        int len1 = num1.length();
        int len2 = num2.length();   
        int i;
        int j;
        char[] arr1 = num1.toCharArray();
        char[] arr2 = num2.toCharArray();
        int[] res = new int[len1 + len2]; 
        int prod = 0; // product
        System.out.println(arr1[0] - '0');
        for(i = len2 - 1; i >= 0; i--){
            for(j = len1 - 1; j >= 0; j--){
                // System.out.println(arr1[j]-'0');
                prod = (arr1[j]-'0') * (arr2[i]-'0'); 
                // key part!
                int index_low = i + j + 1; // position low
                int index_high = i + j; // position high
                prod = prod + res[index_low];
                res[index_low] = prod % 10;
                res[index_high] = res[index_high] + prod / 10;
            }   
        }
        StringBuilder sb = new StringBuilder();
        for(i = 0; i < res.length; i++){
            // deal with leading zero
            if(sb.length()==0 && res[i] == 0){
                // do nothing
            }else{
                sb.append(res[i]);
            }
        }
    
        // deal with "0000" case -> sb will be empty -> "0"
        if(sb.length()==0){
            return "0";
        }//else
        return sb.toString();
    }
}
