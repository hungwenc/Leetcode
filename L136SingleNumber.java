//Given an array of integers, every element appears twice except for one. Find that single one.
//
//Note:
//Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?
public class L136SingleNumber {
	public class Solution {
	    public int singleNumber(int[] num1){
	        int ans = 0;
	        for(int i = 0 ; i < num1.length ;i++){
	            ans = num1[i]^ans;
	        }
			return ans;
		}
	}
    public static void main(String[] args) throws Exception {
    	int x = 1;
    	int y = 4;
    	int k = x | y;
    }
}

//Ans use ^  XOR operator in java

//similar problem::::
//Given two strings s and t which consist of only lowercase letters.
//String t is generated by random shuffling string s and then add one more letter at a random position.
//
//Find the letter that was added in t.
//
//Example:
//
//Input:
//s = "abcd"
//t = "abcde"
//
//Output:
//e
//
//Explanation:
//'e' is the letter that was added.
//public class Solution {
//    public char findTheDifference(String s, String t) {
//        char[] arr1 = new char[s.length()+t.length()];
//        String total = s+t;
//        arr1 = total.toCharArray();
//        int find = 0;
//        for(char c : arr1){
//            find = c^find;
//        }
//        char ans = (char)(find);
//        return ans;
//    }
//}